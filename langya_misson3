#include<iostream>
using namespace std;
int rowA,colA,rowB,colB,arrA[10][10],arrB[10][10];//rowA表示第一个矩阵的行数，colA为列数,rowB表示第二个矩阵的行数,colB表示列数
void show_menu()//定义一个菜单函数，在调用时输出两个矩阵并且展示菜单
{
	cout << "第一个矩阵为:" << endl;
	for (int i = 0; i < rowA; i++)
	{
		for (int j = 0; j < colA; j++)
			cout << arrA[i][j] << " ";
		cout << endl;
	}
	cout << "第二个矩阵为:" << endl;
	for (int i = 0; i < rowB; i++)
	{
		for (int j = 0; j < colB; j++)
			cout << arrB[i][j] << " ";
		cout << endl;
	}
	
	cout << "请输入数字来代表你想要进行的操作\n1.输入1表示让两矩阵相乘\n2.输入2表示让两矩阵相加\n3.输入3表示让两矩阵逆置\n4.输入4表示让两矩阵求逆\n5.输入5表示退出程序\n";
}
class matrix_function//定义一个类，成员包括四个矩阵操作函数
{
public:
	void matrix_mul()//定义一个矩阵相乘函数
	{
		int mul_ans[10][10];
		//先给相乘后矩阵初始化
		for (int i = 0; i < 10; i++)
		{
			for (int j = 0; j < 10; j++)
				mul_ans[i][j] = 0;
			
		}
		//先来判断两矩阵是否能相乘
		if ( colA!= rowB)
		{
			cout << "这两个矩阵不能进行相乘操作！\n";
		}
		else
		{//实现相乘功能
			for (int i = 0; i < rowA; i++)
			{
				for (int j = 0; j < colB; j++)
				{
					for (int k = 0; k < colA; k++)
					{
						mul_ans[i][j] += arrA[i][k] * arrB[k][j];
					}
				}
			}
			//输出相乘结果
			cout << "相乘后的矩阵为：\n";
			for (int i = 0; i < colB; i++)
			{
				for (int j = 0; j < rowA; j++)
					cout <<mul_ans[i][j] << " ";
				cout << endl;
			}
			
		}
		
	}
	void matrix_plus()//定义一个矩阵相加函数
	{
		int plus_ans[10][10];
		if (rowA == rowB && colA == colB)
		{
			//先给相加答案矩阵初始化
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 10; j++)
					plus_ans[i][j] = 0;

			}
			//实现相加功能
			for (int i = 0; i < rowA; i++)
			{
				for (int j = 0; j < colA; j++)
				{
					plus_ans[i][j] = arrA[i][j] + arrB[i][j];
				}
			}
			//输出相加结果
			cout << "相加后的结果为：";
			for (int i = 0; i < rowA; i++)
			{
				for (int j = 0; j < colA; j++)
				{
					cout<<plus_ans[i][j]<<" ";
				}
			}


		}
		else
		{
			cout << "这两个矩阵不能进行相加操作！\n";
		}
	}
	void matrix_move()//定义一个矩阵转置函数
	{
		int vis1[10][10];
		//实现矩阵A的转置
		for (int i = 0; i < rowA; i++)
		{
			for (int j = 0; j < colA; j++)
			{
				vis1[j][i] = arrA[i][j];
			}
		}
		//输出矩阵A转置结果
		cout << "第一个矩阵的逆置矩阵为:" << endl;
		for (int i = 0; i < colA; i++)
		{
			for (int j = 0; j < rowA; j++)
				cout << vis1[i][j]<<" ";
			cout << endl;
		}
		//重置vis1二维数组
		for (int i = 0; i < 10; i++)
		{
			for (int j = 0; j < 10; j++)
				vis1[i][j] = 0;
		}		
		//实现矩阵B的转置
		for (int i = 0; i < rowB; i++)
		{
			for (int j = 0; j < colB; j++)
			{
				vis1[j][i] = arrB[i][j];
			}
		}
		//输出矩阵B转置结果
		cout << "第二个矩阵的逆置矩阵为:" << endl;
		for (int i = 0; i < colB; i++)
		{
			for (int j = 0; j < rowB; j++)
				cout << vis1[i][j] << " ";
			cout << endl;
		}
	}
};
int main()
{
	matrix_function f1;
	cout << "请输入第一个矩阵的行数" ;
	cin >> rowA;
	cout << "请输入第一个矩阵的列数" ;
	cin >> colA;
	cout << "请给第一个矩阵每行每列的元素赋值" << endl;
	for (int i = 0; i < rowA; i++)
	{
		for (int j = 0; j < colA; j++)
		{
			cout << "第" << i + 1 << "行第" << j + 1 << "个元素为:";
			cin >> arrA[i][j];
		}
	}
	
	cout << "请输入第二个矩阵的行数" ;
	cin >> rowB;
	cout << "请输入第二个矩阵的列数" ;
	cin >> colB;
	cout << "请给第二个矩阵每行每列的元素赋值" << endl;
	for (int i = 0; i < rowB; i++)
	{
		for (int j = 0; j < colB; j++)
		{
			cout << "第" << i + 1 << "行第" << j + 1 << "个元素为:";
			cin >> arrB[i][j];
		}
	}
	system("cls");
	/*cout << "第一个矩阵为:" << endl;
	for (int i = 0; i < rowA; i++)
	{
		for (int j = 0; j < colA; j++)
			cout << arrA[i][j] << " ";
		cout << endl;
	}
	cout << endl;
	cout << "第二个矩阵为:" << endl;
	for (int i = 0; i < rowB; i++)
	{
		for (int j = 0; j < colB; j++)
			cout << arrB[i][j] << " ";
		cout << endl;
	}
	cout << endl;*/
	
	while (true)//实现菜单界面一直循环，直到退出（穿插使用清屏操作）
	{
		show_menu();//调用菜单函数
		int choose;
		cin >> choose;
		switch (choose)
		{
		case 1://相乘
			system("cls");
			f1.matrix_mul();	
			break;
		case 2://相加
			system("cls");
			f1.matrix_plus();
			break;
		case 3://转置
			system("cls");
			f1.matrix_move();
			break;
		case 4://求逆
			system("cls");
			cout << "求逆太难了，没做完";
			break;
		default://退出
			system("cls");
			cout << "重振狼牙荣光，我辈义不容辞\n";
			system("pause");
			return 0;
			break;

		}
	}
	return 0;
}
